openapi: 3.0.0
info:
  title: Mainflux loadmanager
  description: |
    The service provides an HTTP API for organizing microgrid management platforms into groups,
    and obtaining their aggregated load.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
paths:
  /microgrids:
    post:
      summary: Creates new microgrid
      description: |
        Registers new microgrid management platform. The platform specification must include an URL
        of the platform. Currently, the service supports instances of Mainflux and Open Smart Grid Platform.
      tags:
        - microgrids
      requestBody:
        description: Microgrid management platform specification.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridRequest'
      responses:
        '201':
          description: |
            Confirmation of successful creation. Contains an auto-generated microgrid identifier.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MicroGridResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Retrieves information about registered microgrids
      tags:
        - microgrids
      responses:
        '200':
          description: A collection containing information about each registered microgrid.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MicroGridCollectionResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /microgrids/{id}:
    get:
      summary: Retrieves information about single microgrid
      tags:
        - microgrids
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Contains information about the specified microgrid management platform instance.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Identifier'
                      - $ref: '#/components/schemas/MicroGridData'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - microgrids
      summary: Deletes specified microgrid
      description: |
        Deletes microgrid specified using its unique identifier. The specified instance will be
        removed from all groups that it belongs.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Microgrid is successfully removed.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups:
    post:
      summary: Creates new group
      description: |
        Group is a container of microgrid management platform instances. Note that only registered
        microgrids can be group members.
      tags:
        - groups
      requestBody:
        description: Group specification.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '201':
          description: |
            Confirmation of successful creation. Contains an auto-generated group identifier.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/GroupDataResponse'
                      - $ref: '#/components/schemas/Links'
                required:
                  - data
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Retrieves information about groups and their members
      tags:
        - groups
      responses:
        '200':
          description: A collection containing information about groups and their members.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/GroupDataResponse'
                        - $ref: '#/components/schemas/Links'
                required:
                  - data
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups/{id}:
    get:
      summary: Retrieves information about single group
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Contains information about the specified group.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/GroupIdentifier'
                      - $ref: '#/components/schemas/GroupDataResponse'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: Deletes specified group
      description: |
        Deletes group specified using its unique identifier. All subscriptions to the removed
        group will be cancelled.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Group is successfully removed.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups/{id}/relationships/microgrids:
    get:
      summary: Retrieves information about grouped microgrid management platforms
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A collection containing identifiers of each group member.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MicroGridIdentifier'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds microgrids to the group
      description:
        Adds existing microgrids to the group. The change will be visible in the next update
        of group's aggregated load.
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection containing identifiers of each new group member.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridDataCollection'
      responses:
        '204':
          description: New group members are successfully added.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Updates group members
      description: |
        Performs a complete replacement of group members in all-or-nothing manner. The change will be
        visible in the next update of group's aggregated load.
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection containing identifiers of each new group member.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridDataCollection'
      responses:
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Specifies microgrids that should be removed from a group
      description: |
        Specified microgrids will be removed in all-or-nothing manner. The change will be visible
        in the next update of group's aggregated load.
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection of microgrid identifiers to be removed.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridDataCollection'
      responses:
        '204':
          description: Specified microgirds have been successfully removed from a group.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /subscribers:
    post:
      summary: Creates new subscriber
      description: |
        A subscription is created by specifying the URL on which it expects to receive updates of
        aggregated load for each of the group it is subscribed on.
      tags:
        - subscribers
      requestBody:
        description: Subscriber specification including list of all group it wants to subscribe immediately.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/SubscriberRequest'
      responses:
        '201':
          description: Confirmation of successful subscription. Contains an auto-generated subscriber identifier.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/SubscriberDataResponse'
                      - $ref: '#/components/schemas/Links'
                required:
                  - data
                  - links
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      callbacks:
        webhook:
          '{$request.body#/data/attributes/callback}':
            post:
              description: |
                Each time new aggregated load update is prepared, it will be sent to provided callback.
              requestBody:
                description: Aggregated load update.
                content:
                  application/vnd.api+json:
                    schema:
                      $ref: '#/components/schemas/CallbackPayload'
              responses:
                '204':
                  description: Empty response with the appropriate HTTP status is required from the subscriber.
    get:
      summary: Retrieves information about registered subscribers
      tags:
        - subscribers
      responses:
        '200':
          description: A collection containing information about registered subscribers.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/SubscriberDataResponse'
                        - $ref: '#/components/schemas/Links'
                required:
                  - data
                  - links
        '500':
          $ref: '#/components/responses/InternalServerError'
  /subscribers/{id}:
    get:
      summary: Retrives information about single subscriber
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Contains information about specified subscriber.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/SubscriberIdentifier'
                      - $ref: '#/components/schemas/SubscriberDataResponse'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - subscribers
      summary: Deletes specified subscriber
      description: Deletes specified subscriber and cancels all of its group subscriptions.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Subscriber is successfully removed.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /subscribers/{id}/relationships/groups:
    get:
      summary: Retrieves information about groupes subscriber is subscribed to
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A collection containing identifiers of each group subscriber is subscribed to.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupIdentifier'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Adds group to the list of subscribed groups
      description: |
        Once a new group is added, subscriber will start receiving its aggregated load updates.
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection containing identifiers of each new group.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupDataCollection'
      responses:
        '204':
          description: New subscriptions are successfully created.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Updates list of subscribed groups
      description: Performs a complete replacement of group members in all-or-nothing manner.
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection containing identifiers of each new group.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupDataCollection'
      responses:
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Specifies groups to which subscriptions should be cancelled
      description: Specified subscriptions will be cancelled in all-or-nothing manner.
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: A collection of group identifiers to be removed.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupDataCollection'
      responses:
        '204':
          description: Subscriber is successfully unsubscribed from specified groups.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Links:
      properties:
        links:
          properties:
            self:
              type: string
              description: Resource URL relative to the service instance host.
      required:
        - links
    Identifier:
      properties:
        id:
          type: integer
          format: int64
          description: Unique resource identifier
      required:
        - id
    MicroGridRequest:
      properties:
        data:
          $ref: '#/components/schemas/MicroGridData'
      required:
        - data
    MicroGridData:
      properties:
        type:
          type: string
          enum:
            - microgrids
        attributes:
          $ref: '#/components/schemas/MicroGridAttributes'
      required:
        - type
        - attributes
    MicroGridAttributes:
      properties:
        url:
          type: string
          description: Microgrid management platform's URL.
          example: "216.3.128.12"
        platformType:
          type: string
          enum:
            - OSGP
            - Mainflux
          description: Type of microgrid management platform.
        organisationId:
          type: string
          description: Unique identifier of microgrid owner.
          example: "test-organisation"
      required:
        - url
        - platformType
    MicroGridResponse:
      properties:
        data:
          $ref: '#/components/schemas/MicroGridResponseData'
      required:
        - data
    MicroGridResponseData:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - $ref: '#/components/schemas/MicroGridData'
        - $ref: '#/components/schemas/Links'
    MicroGridCollectionResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MicroGridResponseData'
    GroupRequest:
      properties:
        data:
          $ref: '#/components/schemas/GroupData'
      required:
        - data
    GroupData:
      properties:
        type:
          type: string
          enum:
            - groups
        attributes:
          $ref: '#/components/schemas/GroupAttributes'
        relationships:
          $ref: '#/components/schemas/MicroGridsRelationshipRequest'
      required:
        - type
        - attributes
        - relationships
    GroupAttributes:
      properties:
        name:
          type: string
          description: Group name.
          example: "Mainflux group"
      required:
        - name
    MicroGridsRelationshipRequest:
      properties:
        microgrids:
          allOf:
            - $ref: '#/components/schemas/MicroGridDataCollection'
      required:
        - microgrids
    MicroGridDataCollection:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MicroGridIdentifier'
      required:
        - data
    MicroGridIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - microgrids
    MicroGridsRelationshipResponse:
      properties:
        microgrids:
          allOf:
            - $ref: '#/components/schemas/Links'
            - $ref: '#/components/schemas/MicroGridDataCollection'
          required:
            - data
            - links
      required:
        - microgrids
    GroupDataResponse:
      allOf:
        - $ref: "#/components/schemas/GroupIdentifier"
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/GroupAttributes'
            relationships:
              $ref: '#/components/schemas/MicroGridsRelationshipResponse'
          required:
            - id
            - type
            - attributes
            - relationships
    GroupIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - groups
    GroupDataCollection:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GroupIdentifier'
      required:
        - data
    SubscriberRequest:
      properties:
        data:
          $ref: '#/components/schemas/SubscriberData'
      required:
        - data
    SubscriberData:
      properties:
        type:
          type: string
          enum:
            - subscribers
        attributes:
          $ref: '#/components/schemas/SubscriberAttributes'
        relationships:
          $ref: '#/components/schemas/SubscribersRelationshipRequest'
      required:
        - type
        - attributes
        - relationships
    SubscriberAttributes:
      properties:
        callback:
          type: string
          description: URL used as a callback for updates of group's aggregated load.
          example: "http://www.client.com/callback"
      required:
        - callback
    SubscribersRelationshipRequest:
      properties:
        groups:
          allOf:
            - $ref: '#/components/schemas/GroupDataCollection'
      required:
        - groups
    SubscriberIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - subscribers
    SubscriberDataResponse:
      allOf:
        - $ref: '#/components/schemas/SubscriberIdentifier'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/SubscriberAttributes'
            relationships:
              $ref: '#/components/schemas/SubscribersRelationshipResponse'
          required:
            - id
            - type
            - attributes
            - relationships
    SubscribersRelationshipResponse:
      properties:
        groups:
          allOf:
            - $ref: '#/components/schemas/Links'
            - $ref: '#/components/schemas/GroupDataCollection'
          required:
            - data
            - links
      required:
        - microgrids
    ErrorResponse:
      properties:
        meta:
          $ref: "#/components/schemas/ErrorMeta"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
      required:
        - meta
        - errors
    ErrorMeta:
      properties:
        createdAt:
          type: string
          description: Time when error occurred expressed in ISO-8601 format.
          example: "2017-10-15T15:00:00.576+11:00"
      required:
        - createdAt
    Error:
      properties:
        status:
          type: string
          description: HTTP status code of an error.
        detail:
          type: string
          description: Human-readable error description.
      required:
        - status
        - detail
    CallbackPayload:
      properties:
        data:
          properties:
            type:
              type: string
              enum:
                - reports
            attributes:
              properties:
                aggregatedLoad:
                  type: number
                  format: double
                  description: Load aggregated for group of microgrids client is subscriber to.
                  example: 50.0
              required:
                - aggregatedLoad
          required:
            - type
            - attributes
        meta:
          properties:
            createdAt:
              type: string
              description: Time when report is generated
              example: "2017-10-15T15:00:00.576+11:00"
          required:
            - createdAt
      required:
        - data
        - meta
  responses:
    BadRequest:
      description: Malformed json provided.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal server occurred.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource does not exist.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Action is forbidden.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    id:
      in: path
      name: id
      required: true
      description: Unique resource identifier.
      schema:
        type: integer
        format: int64
