openapi: 3.0.0
info:
  title: Mainflux loadmanager
  description: |
    The service provides an HTTP API for organizing microgrid management platforms into groups,
    and obtaining their aggregated load.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
paths:
  /microgrids:
    get:
      summary: Retrieve all registred microgrid management platforms.
      tags:
        - microgrids
      responses:
        '200':
          description: Response which indicates that microgrid management platforms are successfully retrieved.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MicroGridCollectionResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: |
        Register new microgrid management platform specifying url on which it is accessible.
        Currently supported platforms are OSGP and Mainflux.
      tags:
        - microgrids
      requestBody:
        description: Request to register microgrid management platform.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridRequest'
      responses:
        '201':
          description: Response which indicates that microgrid is successfully registered.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/MicroGridResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /microgrids/{id}:
    get:
      summary: Retrieve single microgrid management platform by specifying it's unique identifier.
      tags:
        - microgrids
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Response which indicates that microgrid with specified id exists.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Identifier'
                      - $ref: '#/components/schemas/MicroGridData'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups:
    get:
      summary: Retrieve all existing groups and their members(microgrid management platform).
      tags:
        - groups
      responses:
        '200':
          description: Response which indicates that microgrid management platforms are successfully retrieved.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/GroupDataResponse'
                        - $ref: '#/components/schemas/Links'
                required:
                  - data
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Register new group(container of microgrid management platforms) by specifying all it's memebers.
      tags:
        - groups
      requestBody:
        description: Request to register new group by specifying it's name and included microgrid management platforms.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '201':
          description: Response which indicates that group is successfully registered and connected with specified members.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/GroupDataResponse'
                      - $ref: '#/components/schemas/Links'
                required:
                  - data
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups/{id}:
    get:
      summary: Retrieve single group by specifying it's unique identifier.
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Response which indicates that group with specified id exists.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/GroupIdentifier'
                      - $ref: '#/components/schemas/GroupDataResponse'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - groups
      summary: |
        Delete group by specifying it's unique identifier. All subscribers that have subscription on specified
        group won't be notified about it's aggreagate loads.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Response which indicate that group is successfully deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /groups/{groupId}/relationships/microgrids:
    get:
      summary: Retrieve all microgrid management platforms included in specified group.
      tags:
        - groups
        - microgrids
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '200':
          description: Response which consists of microgrids that are group members.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MicroGridIdentifier'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: |
        Add existing microgrids as a new members of specified group. Group aggreaget load
        will automatically be affected by this action.
      tags:
        - groups
        - microgrids
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        description: Request consisting of list of ids of microgrid platforms that will be included in group.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridDataCollection'
      responses:
        '204':
          description: Response thath indicates that microgrid management platform is successfully included in scpecified group.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: |
        Update all relationships between microgrids and specified group. Group will consist only from memebers specified
        in request. Previous memebers won't be included if they are not specified in request.
      tags:
        - groups
        - microgrids
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Specify all microgrid management platforms that you want to remove from group specified by it's unique identifier.
      tags:
        - groups
        - microgrids
      parameters:
        - $ref: '#/components/parameters/groupId'
      requestBody:
        description: Request consiting of unique identifier of microgrids that will be deleted from group.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/MicroGridDataCollection'
      responses:
        '204':
          description: Response which indicates that specified microgrids are deleted from group.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /subscribers:
    get:
      summary: Retrieve all defined subscriptions on groups aggregate load.
      tags:
        - subscribers
      responses:
        '200':
          description: Response which indicates thath subscribers are successfully retrieved.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/SubscriberDataResponse'
                        - $ref: '#/components/schemas/Links'
                required:
                  - data
                  - links
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: |
        Create subscriber(client) that will be notified every time group aggregate load for specified groups is calculated.
        All notifications will be send on callback specified in request body.
      tags:
        - subscribers
      requestBody:
        description: Request for creating new subscription by specifying all groups for which subscriber is interested in.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/SubscriberRequest'
      responses:
        '201':
          description: |
           Response which indicates that subscription is created and reports
           for agggregate load will be sent periodically to client
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/SubscriberDataResponse'
                      - $ref: '#/components/schemas/Links'
                required:
                  - data
                  - links
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      callbacks:
        webhook:
          # when data is sent, it will be sent to the `callback` provided
          '{$request.body#/data/attributes/callback}':
            post:
              description: |
                Notification for client that will be sent every time new report for subscribed group is created.
                Report consists of aggregate load for group and date when report is generated.
              requestBody:
                description: Request consisting of aggregate load for group that client is subscribed to.
                content:
                  application/vnd.api+json:
                    schema:
                      $ref: '#/components/schemas/CallbackPayload'
              responses:
                '204':
                  description: |
                    Your server implementation should return this HTTP status code
                    if the data was received successfully
  /subscribers/{id}:
    get:
      summary: Retrive single subscriber by specifying it's unique identifier.
      tags:
        - subscribers
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Response consisting of subscription and groups that subscription is created for.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/SubscriberIdentifier'
                      - $ref: '#/components/schemas/SubscriberDataResponse'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - subscribers
      summary: |
        Unsubscribe from retrieving reports from our application.
        Reports won't be send to specified client for specified group.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: Response which indicates that client successfuly removed subscription.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /subscribers/{subscriberId}/relationships/groups:
    get:
      summary: Retrieve all groups that subscriber is subscribed on. Subscriber is specified by it's unique identifier as path parameter.
      tags:
        - subscribers
        - groups
      parameters:
        - $ref: '#/components/parameters/subscriberId'
      responses:
        '200':
          description: |
            Response which indicates that subscriber exists.
            Data section will consists of groups that subscriber is subscribed on.
          content:
            application/vnd.api+json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupIdentifier'
                required:
                  - data
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: |
        Create new subscriptions to aggregate load of groups. Client will be notified about all
        calculated aggreagte loads for specified groups
      tags:
        - subscribers
        - groups
      parameters:
        - $ref: '#/components/parameters/subscriberId'
      requestBody:
        description: Request consisting of groups that client want to subscribe on.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupDataCollection'
      responses:
        '204':
          description: Response indicates that client successfully crate subscription on groups.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: |
        Update all subscriptions that client already created. Client will retrieve reports only from groups specified
        in request. Previous groups won't be included in report if they are not specified in request.
      tags:
        - subscribers
        - groups
      parameters:
        - $ref: '#/components/parameters/subscriberId'
      responses:
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Specify all groups that you want to remove from subscription specified by it's unique identifier.
      tags:
        - subscribers
        - groups
      parameters:
        - $ref: '#/components/parameters/subscriberId'
      requestBody:
        description: Request consists of groups for which client don't want to retrieve reports no more.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/GroupDataCollection'
      responses:
        '204':
          description: Response which indicates that client is successfully unsubscribed from groups.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Links:
      properties:
        links:
          properties:
            self:
              type: string
              description: Path on which resource is accessible.
      required:
        - links
    Identifier:
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of entity
      required:
        - id
    MicroGridRequest:
      properties:
        data:
          $ref: '#/components/schemas/MicroGridData'
      required:
        - data
    MicroGridData:
      properties:
        type:
          type: string
          enum:
            - microgrids
        attributes:
          $ref: '#/components/schemas/MicroGridAttributes'
      required:
        - type
        - attributes
    MicroGridAttributes:
      properties:
        url:
          type: string
          description: Url on which microgrid is accessible
          example: '216.3.128.12'
        platformType:
          type: string
          enum:
            - OSGP
            - Mainflux
          description: Platform type of specified microgrid
        organisationId:
          type: string
          description: Unique identifier of organisation that is microgrid owner
          example: "test-organisation"
      required:
        - url
        - platformType
    MicroGridResponse:
      properties:
        data:
          $ref: '#/components/schemas/MicroGridResponseData'
      required:
        - data
    MicroGridResponseData:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - $ref: '#/components/schemas/MicroGridData'
        - $ref: '#/components/schemas/Links'
    MicroGridCollectionResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MicroGridResponseData'
    GroupRequest:
      properties:
        data:
          $ref: '#/components/schemas/GroupData'
      required:
        - data
    GroupData:
      properties:
        type:
          type: string
          enum:
            - groups
        attributes:
          $ref: '#/components/schemas/GroupAttributes'
        relationships:
          $ref: '#/components/schemas/MicroGridsRelationshipRequest'
      required:
        - type
        - attributes
        - relationships
    GroupAttributes:
      properties:
        name:
          type: string
          description: Name of group
          example: "Mainflux group"
      required:
        - name
    MicroGridsRelationshipRequest:
      properties:
        microgrids:
          allOf:
            - $ref: '#/components/schemas/MicroGridDataCollection'
      required:
        - microgrids
    MicroGridDataCollection:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MicroGridIdentifier'
      required:
        - data
    MicroGridIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - microgrids
    MicroGridsRelationshipResponse:
      properties:
        microgrids:
          allOf:
            - $ref: '#/components/schemas/Links'
            - $ref: '#/components/schemas/MicroGridDataCollection'
          required:
            - data
            - links
      required:
        - microgrids
    GroupDataResponse:
      allOf:
        - $ref: "#/components/schemas/GroupIdentifier"
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/GroupAttributes'
            relationships:
              $ref: '#/components/schemas/MicroGridsRelationshipResponse'
          required:
            - id
            - type
            - attributes
            - relationships
    GroupIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - groups
    GroupDataCollection:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GroupIdentifier'
      required:
        - data
    SubscriberRequest:
      properties:
        data:
          $ref: '#/components/schemas/SubscriberData'
      required:
        - data
    SubscriberData:
      properties:
        type:
          type: string
          enum:
            - subscribers
        attributes:
          $ref: '#/components/schemas/SubscriberAttributes'
        relationships:
          $ref: '#/components/schemas/SubscribersRelationshipRequest'
      required:
        - type
        - attributes
        - relationships
    SubscriberAttributes:
      properties:
        callback:
          type: string
          description: Url that will be used to notify subscriber about aggregate load.
          example: 'http://www.client.com/callback'
      required:
        - callback
    SubscribersRelationshipRequest:
      properties:
        groups:
          allOf:
            - $ref: '#/components/schemas/GroupDataCollection'
      required:
        - groups
    SubscriberIdentifier:
      allOf:
        - $ref: '#/components/schemas/Identifier'
        - type: object
          properties:
            type:
              type: string
              enum:
                - subscribers
    SubscriberDataResponse:
      allOf:
        - $ref: '#/components/schemas/SubscriberIdentifier'
        - type: object
          properties:
            attributes:
              $ref: '#/components/schemas/SubscriberAttributes'
            relationships:
              $ref: '#/components/schemas/SubscribersRelationshipResponse'
          required:
            - id
            - type
            - attributes
            - relationships
    SubscribersRelationshipResponse:
      properties:
        groups:
          allOf:
            - $ref: '#/components/schemas/Links'
            - $ref: '#/components/schemas/GroupDataCollection'
          required:
            - data
            - links
      required:
        - microgrids
    ErrorResponse:
      properties:
        meta:
          $ref: "#/components/schemas/ErrorMeta"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
      required:
        - meta
        - errors
    ErrorMeta:
      properties:
        createdAt:
          type: string
          description: Time when error occurred in ISO-8601 format
          example: "2017-10-15T15:00:00.576+11:00"
      required:
        - createdAt
    Error:
      properties:
        status:
          type: string
          description: HTTP status code of an error
        detail:
          type: string
          description: Human-readable explanation
      required:
        - status
        - detail
    CallbackPayload:
      properties:
        data:
          properties:
            type:
              type: string
              enum:
                - reports
            attributes:
              properties:
                aggregatedLoad:
                  type: number
                  format: double
                  description: Sum of all microgrid loads for specified group
                  example: 50
              required:
                - aggregatedLoad
          required:
            - type
            - attributes
        meta:
          properties:
            createdAt:
              type: string
              description: Time when report is generated
              example: "2017-10-15T15:00:00.576+11:00"
          required:
            - createdAt
      required:
        - data
        - meta
  responses:
    BadRequest:
      description: Malformed json provided.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal server occurred.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Entity not found.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Action is forbidden.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    idParam:
      in: path
      name: id
      required: true
      description: Unique identifier of entity
      schema:
        type: integer
        format: int64
    groupId:
      in: path
      name: groupId
      required: true
      description: Unique identifier of group
      schema:
        type: integer
        format: int64
    subscriberId:
      in: path
      name: subscriberId
      required: true
      description: Unique identifier of subscriber
      schema:
        type: integer
        format: int64
